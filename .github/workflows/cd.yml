name: Create and publish a Docker image

on:
  release:
    types: [published]
  push:
    branches:
      - release
      - main

env:
  VULTR_REGISTRY: sjc.vultrcr.com
  VULTR_IMAGE_NAME: seven/fxrate
  GHCR_IMAGE_NAME: fxrate

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Vultr Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.VULTR_REGISTRY }}
          username: ${{ secrets.USERNAME }}
          password: ${{ secrets.PASSWORD }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: |
            ${{ env.VULTR_REGISTRY }}/${{ env.VULTR_IMAGE_NAME }}
            ghcr.io/${{ github.repository_owner }}/${{ env.GHCR_IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}
            type=semver,pattern={{version}},value=${{ github.ref_name }},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{major}}.{{minor}},value=${{ github.ref_name }},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{major}},value=${{ github.ref_name }},enable=${{ startsWith(github.ref, 'refs/tags/') }}
            type=semver,pattern={{version}},value=${{ github.event.release.tag_name }},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}},value=${{ github.event.release.tag_name }},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}},value=${{ github.event.release.tag_name }},enable=${{ github.event_name == 'release' }}
            type=raw,value=${{ github.event.release.tag_name }},enable=${{ github.event_name == 'release' }}
            type=ref,event=branch
            type=sha

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v6
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          provenance: false

      - name: Generate artifact attestation (OCI referrers)
        id: attest
        uses: actions/attest-build-provenance@v1
        continue-on-error: true
        with:
          subject-name: ${{ env.VULTR_REGISTRY }}/${{ env.VULTR_IMAGE_NAME }}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

      - name: Install cosign
        if: steps.attest.outcome == 'failure'
        uses: sigstore/cosign-installer@v3

      - name: Push SLSA attestation with cosign (keyless default)
        if: steps.attest.outcome == 'failure'
        env:
          COSIGN_YES: "true"
        run: |
          cat > predicate.json <<'JSON'
          { "buildType": "https://slsa.dev/container/v1",
            "builder": { "id": "${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}" },
            "invocation": { "configSource": { "entryPoint": ".github/workflows/cd.yml" } }
          }
          JSON
          cosign attest \
            --predicate predicate.json \
            --type slsaprovenance \
            ${{ env.VULTR_REGISTRY }}/${{ env.VULTR_IMAGE_NAME }}@${{ steps.push.outputs.digest }}
